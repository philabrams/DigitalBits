name: Build For All Platforms
# Controls when the action will run. 
on:
  push:
    branches-ignore:
      - master
  workflow_dispatch:
jobs:
  linuxbuild:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          submodules: recursive

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install git build-essential alien pkg-config \
          autoconf automake libtool bison flex \
          parallel gcc-8 g++-8 cpp-8 unzip curl pandoc

      - name: Build AWS C++ SDK
        run: |
          ./vcpkg/bootstrap-vcpkg.sh
          ./vcpkg/vcpkg install "aws-sdk-cpp[secretsmanager]:x64-linux" --recurse
          ./vcpkg/vcpkg install "zlib:x64-linux"
          ./vcpkg/vcpkg install "libpq:x64-linux"

      - name: Build the app
        run: |
          export CC=clang
          export CXX=clang++
          mkdir build
          cmake -S . -B build
          make -j`nproc` -C build

      - name: Run tests
        run: |
           make check -C build

  macosbuild:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          submodules: recursive

      - name: Install deps
        run: |
          brew install automake
          brew install coreutils
          brew install pandoc

      - name: Build AWS C++ SDK
        run: |
          ./vcpkg/bootstrap-vcpkg.sh
          ./vcpkg/vcpkg install "aws-sdk-cpp[secretsmanager]:x64-osx" --recurse
          ./vcpkg/vcpkg install "zlib:x64-osx"
          ./vcpkg/vcpkg install "libpq:x64-osx"

      - name: Build the app    
        run: |
           export PATH=$PATH:/Library/Frameworks/Python.framework/Versions/2.7/bin
           export PKG_CONFIG_PATH="/usr/local/opt/openssl/lib/pkgconfig"
           mkdir build
           cmake -S . -B build
           make -j`nproc` -C build

      - name: Run tests
        run: |
           make check -C build

  windowsbuild:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          submodules: recursive


      - name: Install PostgresQL
        run: |
          curl -L -o postgresql.exe https://sbp.enterprisedb.com/getfile.jsp?fileid=1257550
          .\postgresql.exe --unattendedmodeui minimal --mode unattended --superpassword "password" --servicename "postgreSQL" --servicepassword "password" --serverport 5432
          setx /M path "%path%;C:\Program Files\PostgreSQL\9.5\bin"

      - run: |          
          curl -L -o postgresql.zip https://sbp.enterprisedb.com/getfile.jsp?fileid=1257551
          Expand-Archive -Path postgresql.zip -DestinationPath .
          mkdir -p "C:\Program Files\PostgreSQL\9.5\lib"
          cp -r pgsql\lib\* "C:\Program Files\PostgreSQL\9.5\lib\"
          dir "C:\Program Files\PostgreSQL\9.5\lib"
          mkdir -p "C:\Program Files\PostgreSQL\9.5\include"
          cp -r pgsql\include\* "C:\Program Files\PostgreSQL\9.5\include\"
          dir "C:\Program Files\PostgreSQL\9.5\include"
      
      - name: Set up Cygwin
        uses: egor-tensin/setup-cygwin@v3
        with:
          platform: x64
          packages: flex bison sed curl gcc-core
          
      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1

      - name: Build AWS C++ SDK
        run: |
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg integrate install
          .\vcpkg\vcpkg install "aws-sdk-cpp[secretsmanager]:x64-windows-static" --recurse
          .\vcpkg\vcpkg install "zlib:x64-windows-static"
      
      - name: Prepare Solution
        run: |
          mkdir build
          cmake -S . -B build -DVCPKG_TARGET_TRIPLET=x64-windows-static

      - name: Build Solution
        run: |
            msbuild.exe build\digitalbits-core.sln /p:platform="x64" /p:configuration="Release" /p:AdditionalLibPaths="C:\Program Files\PostgreSQL\9.5\include"
  
  dockerbuild:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          submodules: recursive

      - name: Build Docker Image
        run: docker build -t digitalbits-core .
