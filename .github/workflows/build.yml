name: Build For All Platforms
# Controls when the action will run. 
on:
  push:
    branches-ignore:
      - master
  workflow_dispatch:
jobs:
  sonarcloudanalysis:
    name: Build SonarCloud analysis
    runs-on: ubuntu-latest
    env:
      SONAR_SCANNER_VERSION: 4.7.0.2747
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: sonar_analysis_output
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Download and set up sonar-scanner
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH
      - name: Download and set up build-wrapper
        env:
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
        run: |
          curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH
      - name: Run build-wrapper
      env:
          NUMBER_OF_PROCESSORS: $(nproc --all)
        run: |
          ./autogen.sh
          ./configure
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} make clean all
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"
  linuxbuild:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install git build-essential alien pkg-config \
          autoconf automake libtool bison flex libpq-dev libunwind-dev \
          parallel gcc-8 g++-8 cpp-8 unzip curl
      - name: Build the app    
        run: |
           ./autogen.sh
           ./configure  
           make -j`nproc`

  macosbuild:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Install deps
        run: |
          brew install automake
          brew install libpqxx 

      - name: Build the app    
        run: |
           export PATH=$PATH:/Library/Frameworks/Python.framework/Versions/2.7/bin
           export PKG_CONFIG_PATH="/usr/local/opt/openssl/lib/pkgconfig"
           ./autogen.sh
           ./configure  
           make -j2

  windowsbuild:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          submodules: recursive
      - name: Install PostgresQL
        run: |
          curl -L -o postgresql.exe https://sbp.enterprisedb.com/getfile.jsp?fileid=1257550
          .\postgresql.exe --unattendedmodeui minimal --mode unattended --superpassword "password" --servicename "postgreSQL" --servicepassword "password" --serverport 5432
          setx /M path "%path%;C:\Program Files\PostgreSQL\9.5\bin"
          
      #cd lib\spdlog && mkdir build && cd build && cmake .. && make -j
      - run: |          
          curl -L -o postgresql.zip https://sbp.enterprisedb.com/getfile.jsp?fileid=1257551
          Expand-Archive -Path postgresql.zip -DestinationPath .
          mkdir -p "C:\Program Files\PostgreSQL\9.5\lib"
          cp -r pgsql\lib\* "C:\Program Files\PostgreSQL\9.5\lib\"
          dir "C:\Program Files\PostgreSQL\9.5\lib"
          mkdir -p "C:\Program Files\PostgreSQL\9.5\include"
          cp -r pgsql\include\* "C:\Program Files\PostgreSQL\9.5\include\"
          dir "C:\Program Files\PostgreSQL\9.5\include"
      
      - name: Set up Cygwin
        uses: egor-tensin/setup-cygwin@v3
        with:
          platform: x64
          packages: flex bison sed curl gcc-core
          
      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1 

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.5
      
      - run: |
          nuget restore Builds\VisualStudio\digitalbits-core.sln
          
      - name: Create Build Directory
        run: mkdir _build

      - name: Build Solution
        run: |
            msbuild.exe Builds\VisualStudio\digitalbits-core.sln /p:platform="x64" /p:configuration="Release" /p:AdditionalLibPaths="C:\Program Files\PostgreSQL\9.5\include"
  
  dockerbuild:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - name: Build Docker Image
        run: docker build -t digitalbits-core .
