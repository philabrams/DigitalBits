name: Release For All Platforms
# Controls when the action will run. 
on:
  push:
    branches: 
      - master
  workflow_dispatch:
jobs:
  tagbump:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'   # This workflow contains a single job called "build"
      - name: Github Tag Bump
        id: bump_version
        uses: anothrNick/github-tag-action@1.36.0
        env:
          DEFAULT_BUMP: "patch"
          RELEASE_BRANCHES: master
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: false

      #- uses: ncipollo/release-action@v1
      #  with:
      #    tag: ${{ steps.bump_version.outputs.tag }}
      #    bodyFile: "README.md"
      #    token: ${{ secrets.GITHUB_TOKEN }}

  linuxbuild:
    needs: tagbump
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - name: Get Latest Tag
        id: previoustag
        uses: WyriHaximus/github-action-get-previous-tag@v1
        #can we not depend on unknown 3rd party here - WyriHaximus??

      - name: Install deps
        run: |
          lsb_release -a 
          id -a
          sudo apt-get update
          #for the sake of PPA toolchain apt install
          sudo apt-get install -y software-properties-common 
          #what we use PPA for?
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get install fakeroot devscripts equivs debhelper lintian binutils  \
          dh-make gnupg pbuilder ubuntu-dev-tools apt-file git build-essential alien pkg-config \
          autoconf automake devscripts libtool bison clang-format flex libpq-dev libunwind-dev \
          parallel gcc-8 g++-8 cpp-8 unzip curl postgresql pandoc  \
          python3-pip ruby ruby-dev rubygems python3-setuptools 
          pip3 install wheel #what we need python for?
          sudo mk-build-deps --install --tool="apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends --yes" debian/control
          #sudo gem install --no-document fpm #replaced by deb-buildpackage, ref https://packaging.ubuntu.com/ubuntu-packaging-guide.pdf


      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: build, run unit test, package .deb package
        run: |
            id -a
            # we dont execute unit tests from root. Even when have to execute build form fakeroot(1)
            # - otherwise debian package fails to set FS permissions in resulting binary
            sudo adduser --disabled-password --gecos "" digitalbits_build_tests_exec
            #per ./INSTALL.md
            ./autogen.sh
            #for unit tests by make check
            export PATH=$PATH:/usr/lib/postgresql/12/bin/ 
            dch -v "${{ steps.previoustag.outputs.tag }}" -D "unstable" "latest build"
            #debian package tooling has to be run from root, to set FS perms inside resulted binary(?)
            #fakeroot(1) is a workaround, sets fake UID and fake behavuor of sensitive syscalls by LD_PRELOAD but can not apply it here bc
            #digtalbits unit test suite depends postgress tooling(pg_ctl) which refuses be run from root(good) and has aggressie checks of FS ownership, that can not be faked in fakeroot environment 
            sudo dpkg-buildpackage -b 
            # fpm -f -s dir -t deb -n $(if [[ $GITHUB_REF_NAME != 'master' ]]; then  echo "beta"; fi;])-digitalbits-core -v ${{ steps.previoustag.outputs.tag }} --deb-use-file-permissions \
            # /opt/digitalbits/digitalbits-core=/usr/local/bin/digitalbits-core \
            # digitalbits-core.service=/etc/systemd/system/digitalbits-core.service \
            # digitalbits-core=/etc/logrotate.d/digitalbits-core
      
      - name: Make .rpm package
        run: | 
          sudo alien -r -k digitalbits-core_${{ steps.previoustag.outputs.tag }}_amd64.deb
          sudo cp digitalbits-core-linux-amd64.tar.gz digitalbits-core_${{ steps.previoustag.outputs.tag }}_linux-amd64.tar.gz 
          
      - name: prepare docker package
        run: |
          cp debian/digitalbits-core/usr/local/bin/digitalbits-core xdb-core
            
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Stable
        if: "!contains(steps.previoustag.outputs.tag, 'beta')"
        id: docker_build_stable
        uses: docker/build-push-action@v2
        with:
          #TODO Uncomment after test
          #push: true
          context: .
          file: Dockerfile.prebuild
          tags: |
            ghcr.io/xdbfoundation/digitalbits-core:${{ steps.previoustag.outputs.tag }}
            ghcr.io/xdbfoundation/digitalbits-core:latest

      - name: Stable Image digest
        if: "!contains(steps.previoustag.outputs.tag, 'beta')"
        run: echo ${{ steps.docker_build_stable.outputs.digest }}
      - uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: "digitalbits-core_${{ steps.previoustag.outputs.tag }}*, digitalbits-core-${{ steps.previoustag.outputs.tag }}*"
          tag: ${{ steps.previoustag.outputs.tag }}
          bodyFile: "README.md"
          omitBodyDuringUpdate: true
          token: ${{ secrets.GITHUB_TOKEN }}
