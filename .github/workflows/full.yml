name: Release For All Platforms
# Controls when the action will run. 
on:
  push:
    branches: 
      - master
  workflow_dispatch:
jobs:
  tagbump:
    runs-on: ubuntu-22.04
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'   # This workflow contains a single job called "build"
      - name: Github Tag Bump
        id: bump_version
        uses: anothrNick/github-tag-action@1.36.0
        env:
          DEFAULT_BUMP: "patch"
          RELEASE_BRANCHES: master
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: false

      - uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.bump_version.outputs.tag }}
          bodyFile: "README.md"
          token: ${{ secrets.GITHUB_TOKEN }}

  linuxbuild:
    needs: tagbump
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - name: Get Latest Tag
        id: previoustag
        uses: WyriHaximus/github-action-get-previous-tag@v1
        #can we not depend on unknown 3rd party here - WyriHaximus??

      - name: Install deps
        run: |
          sudo apt-get update
          #for the sake of PPA toolchain apt install
          sudo apt-get install -y software-properties-common 
          #what we use PPA for?
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get install fakeroot devscripts debhelper lintian binutils  \
          dh-make gnupg pbuilder ubuntu-dev-tools apt-file git build-essential alien pkg-config \
          autoconf automake devscripts libtool bison clang-format flex libpq-dev libunwind-dev \
          parallel gcc-8 g++-8 cpp-8 unzip curl postgresql pandoc  \
          python3-pip ruby ruby-dev rubygems python3-setuptools 
          pip3 install wheel #what we need python for?
          #sudo gem install --no-document fpm #replaced by deb-buildpackage, ref https://packaging.ubuntu.com/ubuntu-packaging-guide.pdf


      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      #- name: Build the app    
      #  run: |
      #     ./autogen.sh
      #     ./configure  
      #     make -j`nproc`
      #     sudo make install
      #     mkdir /opt/digitalbits    
      #     sudo cp /usr/local/bin/digitalbits-core /opt/digitalbits/digitalbits-core     
      #     sudo cp /usr/local/bin/digitalbits-core ./xdb-core
      #     sudo tar -czvf digitalbits-core-linux-amd64.tar.gz /opt/digitalbits/digitalbits-core

      - name: build, run unit test, package .deb package
        run: |
            #for unit tests by make check
            export PATH=$PATH:/usr/lib/postgresql/12/bin/ 
            dch -v "${{ steps.previoustag.outputs.tag }}" -D "unstable" "latest build"
            fakeroot dpkg-buildpackage -b 
            # fpm -f -s dir -t deb -n $(if [[ $GITHUB_REF_NAME != 'master' ]]; then  echo "beta"; fi;])-digitalbits-core -v ${{ steps.previoustag.outputs.tag }} --deb-use-file-permissions \
            # /opt/digitalbits/digitalbits-core=/usr/local/bin/digitalbits-core \
            # digitalbits-core.service=/etc/systemd/system/digitalbits-core.service \
            # digitalbits-core=/etc/logrotate.d/digitalbits-core
      
      - name: Make .rpm package
        run: | 
          sudo alien -r -k digitalbits-core_${{ steps.previoustag.outputs.tag }}_amd64.deb
          sudo cp digitalbits-core-linux-amd64.tar.gz digitalbits-core_${{ steps.previoustag.outputs.tag }}_linux-amd64.tar.gz 
          
      - name: prepare docker package
        run: |
            cp debian/digitalbits-core/usr/local/bin/digitalbits-core xdb-core
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Stable
        if: "!contains(steps.previoustag.outputs.tag, 'beta')"
        id: docker_build_stable
        uses: docker/build-push-action@v2
        with:
          #TODO Uncomment after test
          #push: true
          context: .
          file: Dockerfile.prebuild
          tags: |
            ghcr.io/xdbfoundation/digitalbits-core:${{ steps.previoustag.outputs.tag }}
            ghcr.io/xdbfoundation/digitalbits-core:latest

      - name: Stable Image digest
        if: "!contains(steps.previoustag.outputs.tag, 'beta')"
        run: echo ${{ steps.docker_build_stable.outputs.digest }}
      - uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: "digitalbits-core_${{ steps.previoustag.outputs.tag }}*, digitalbits-core-${{ steps.previoustag.outputs.tag }}*"
          tag: ${{ steps.previoustag.outputs.tag }}
          bodyFile: "README.md"
          omitBodyDuringUpdate: true
          token: ${{ secrets.GITHUB_TOKEN }}

  macosbuild:
    needs: tagbump
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - name: Get Latest Tag
        id: previoustag
        uses: WyriHaximus/github-action-get-previous-tag@v1
        
      - name: Install deps
        run: |
          brew install automake
          brew install libpqxx

      - name: Build the app    
        run: |
           export PATH=$PATH:/Library/Frameworks/Python.framework/Versions/2.7/bin
           export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/opt/openssl/lib/pkgconfig
           export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/opt/libpq/lib/pkgconfig
           ./autogen.sh
           ./configure  
           make -j2
           sudo make install
           sudo mkdir /opt/digitalbits    
           sudo cp /usr/local/bin/digitalbits-core /opt/digitalbits/digitalbits-core     
           sudo tar -czvf digitalbits-core-darwin-amd64.tar.gz /opt/digitalbits/digitalbits-core
           sudo cp digitalbits-core-darwin-amd64.tar.gz digitalbits-core_${{ steps.previoustag.outputs.tag }}_darwin-amd64.tar.gz
      
      - uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: "digitalbits-core_${{ steps.previoustag.outputs.tag }}_darwin-amd64.tar.gz"
          omitBodyDuringUpdate: true
          tag: ${{ steps.previoustag.outputs.tag }}
          token: ${{ secrets.GITHUB_TOKEN }}   
  
  windowsbuild:
    needs: tagbump
    runs-on: windows-latest
    steps:

      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          submodules: recursive

      - name: Get Latest Tag
        id: previoustag
        uses: WyriHaximus/github-action-get-previous-tag@v1

      - name: Install PostgresQL
        run: |
          curl -L -o postgresql.exe https://sbp.enterprisedb.com/getfile.jsp?fileid=1257550
          .\postgresql.exe --unattendedmodeui minimal --mode unattended --superpassword "password" --servicename "postgreSQL" --servicepassword "password" --serverport 5432
          setx /M path "%path%;C:\Program Files\PostgreSQL\9.5\bin"
          
      #cd lib\spdlog && mkdir build && cd build && cmake .. && make -j
      - run: |          
          curl -L -o postgresql.zip https://sbp.enterprisedb.com/getfile.jsp?fileid=1257551
          Expand-Archive -Path postgresql.zip -DestinationPath .
          mkdir -p "C:\Program Files\PostgreSQL\9.5\lib"
          cp -r pgsql\lib\* "C:\Program Files\PostgreSQL\9.5\lib\"
          dir "C:\Program Files\PostgreSQL\9.5\lib"
          mkdir -p "C:\Program Files\PostgreSQL\9.5\include"
          cp -r pgsql\include\* "C:\Program Files\PostgreSQL\9.5\include\"
          dir "C:\Program Files\PostgreSQL\9.5\include"

      - name: Set up Cygwin
        uses: egor-tensin/setup-cygwin@v3
        with:
          platform: x64
          packages: flex bison sed curl gcc-core
          
      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1 

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.5
      
      - run: |
          nuget restore Builds\VisualStudio\digitalbits-core.sln
          
      - name: Create Build Directory
        run: mkdir _build

      - name: Build Solution
        run: |
            msbuild.exe Builds\VisualStudio\digitalbits-core.sln /p:platform="x64" /p:configuration="Release" /p:AdditionalLibPaths="C:\Program Files\PostgreSQL\9.5\include"
      
      - name: Prepare zip archive
        run: |
          Compress-Archive Builds\VisualStudio\x64\Release\digitalbits-core.exe digitalbits-core_${{ steps.previoustag.outputs.tag }}_windows-amd64.zip

      - uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: "digitalbits-core_${{ steps.previoustag.outputs.tag }}_windows-amd64.zip"
          tag: ${{ steps.previoustag.outputs.tag }}
          bodyFile: "README.md"
          omitBodyDuringUpdate: true
          token: ${{ secrets.GITHUB_TOKEN }}
